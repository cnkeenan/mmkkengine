#if !defined(OPENGL_H)
/* ========================================================================
   $Creator: Armand Karambasis $
   ======================================================================== */

#define GL_COLOR_BUFFER_BIT               0x00004000

#define GL_VENDOR                         0x1F00
#define GL_RENDERER                       0x1F01
#define GL_VERSION                        0x1F02
#define GL_EXTENSIONS                     0x1F03

typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef signed char GLbyte;
typedef short GLshort;
typedef int GLint;
typedef int GLsizei;
typedef unsigned char GLubyte;
typedef unsigned short GLushort;
typedef unsigned int GLuint;
typedef float GLfloat;
typedef double GLdouble;
typedef float GLclampf;
typedef void GLvoid;
typedef int GLintptr;
typedef int GLsizeiptr;
typedef int GLfixed;
typedef double GLclampd;
typedef int GLclampx;
typedef char GLchar;
typedef int64_t GLint64;
typedef uint64_t GLuint64;
typedef struct __GLsync *GLsync;

#if OS_MAC
void glActiveTexture (GLenum texture);
void glAlphaFunc (GLenum func, GLclampf ref);
void glAlphaFuncx (GLenum func, GLclampx ref);
void glBindTexture (GLenum target, GLuint texture);
void glBlendFunc (GLenum sfactor, GLenum dfactor);
void glClear (GLbitfield mask);
void glClearColor (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void glClearColorx (GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha);
void glClearDepthf (GLclampf depth);
void glClearDepthx (GLclampx depth);
void glClearStencil (GLint s);
void glClientActiveTexture (GLenum texture);
void glColor4f (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void glColor4x (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
void glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
void glColorPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void glCompressedTexImage2D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
void glCompressedTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
void glCopyTexImage2D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void glCullFace (GLenum mode);
void glDeleteTextures (GLsizei n, const GLuint *textures);
void glDepthFunc (GLenum func);
void glDepthMask (GLboolean flag);
void glDepthRangef (GLclampf zNear, GLclampf zFar);
void glDepthRangex (GLclampx zNear, GLclampx zFar);
void glDisable (GLenum cap);
void glDisableClientState (GLenum array);
void glDrawArrays (GLenum mode, GLint first, GLsizei count);
void glDrawElements (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
void glEnable (GLenum cap);
void glEnableClientState (GLenum array);
void glFinish (void);
void glFlush (void);
void glFogf (GLenum pname, GLfloat param);
void glFogfv (GLenum pname, const GLfloat *params);
void glFogx (GLenum pname, GLfixed param);
void glFogxv (GLenum pname, const GLfixed *params);
void glFrontFace (GLenum mode);
void glFrustumf (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar);
void glFrustumx (GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar);
void glGenTextures (GLsizei n, GLuint *textures);
GLenum glGetError (void);
void glGetIntegerv (GLenum pname, GLint *params);
const GLubyte* glGetString (GLenum name);
void glHint (GLenum target, GLenum mode);
void glLightModelf (GLenum pname, GLfloat param);
void glLightModelfv (GLenum pname, const GLfloat *params);
void glLightModelx (GLenum pname, GLfixed param);
void glLightModelxv (GLenum pname, const GLfixed *params);
void glLightf (GLenum light, GLenum pname, GLfloat param);
void glLightfv (GLenum light, GLenum pname, const GLfloat *params);
void glLightx (GLenum light, GLenum pname, GLfixed param);
void glLightxv (GLenum light, GLenum pname, const GLfixed *params);
void glLineWidth (GLfloat width);
void glLineWidthx (GLfixed width);
void glLoadIdentity (void);
void glLoadMatrixf (const GLfloat *m);
void glLoadMatrixx (const GLfixed *m);
void glLogicOp (GLenum opcode);
void glMaterialf (GLenum face, GLenum pname, GLfloat param);
void glMaterialfv (GLenum face, GLenum pname, const GLfloat *params);
void glMaterialx (GLenum face, GLenum pname, GLfixed param);
void glMaterialxv (GLenum face, GLenum pname, const GLfixed *params);
void glMatrixMode (GLenum mode);
void glMultMatrixf (const GLfloat *m);
void glMultMatrixx (const GLfixed *m);
void glMultiTexCoord4f (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void glMultiTexCoord4x (GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
void glNormal3f (GLfloat nx, GLfloat ny, GLfloat nz);
void glNormal3x (GLfixed nx, GLfixed ny, GLfixed nz);
void glNormalPointer (GLenum type, GLsizei stride, const GLvoid *pointer);
void glOrthof (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar);
void glOrthox (GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar);
void glPixelStorei (GLenum pname, GLint param);
void glPointSize (GLfloat size);
void glPointSizex (GLfixed size);
void glPolygonOffset (GLfloat factor, GLfloat units);
void glPolygonOffsetx (GLfixed factor, GLfixed units);
void glPopMatrix (void);
void glPushMatrix (void);
void glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
void glRotatef (GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
void glRotatex (GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
void glSampleCoverage (GLclampf value, GLboolean invert);
void glSampleCoveragex (GLclampx value, GLboolean invert);
void glScalef (GLfloat x, GLfloat y, GLfloat z);
void glScalex (GLfixed x, GLfixed y, GLfixed z);
void glScissor (GLint x, GLint y, GLsizei width, GLsizei height);
void glShadeModel (GLenum mode);
void glStencilFunc (GLenum func, GLint ref, GLuint mask);
void glStencilMask (GLuint mask);
void glStencilOp (GLenum fail, GLenum zfail, GLenum zpass);
void glTexCoordPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void glTexEnvf (GLenum target, GLenum pname, GLfloat param);
void glTexEnvfv (GLenum target, GLenum pname, const GLfloat *params);
void glTexEnvx (GLenum target, GLenum pname, GLfixed param);
void glTexEnvxv (GLenum target, GLenum pname, const GLfixed *params);
void glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void glTexParameterf (GLenum target, GLenum pname, GLfloat param);
void glTexParameterx (GLenum target, GLenum pname, GLfixed param);
void glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
void glTranslatef (GLfloat x, GLfloat y, GLfloat z);
void glTranslatex (GLfixed x, GLfixed y, GLfixed z);
void glVertexPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void glViewport (GLint x, GLint y, GLsizei width, GLsizei height);

void glCompressedTexImage1D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei imageSize, const GLvoid* data);
void glCompressedTexImage3D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data);
void glCompressedTexSubImage1D (GLenum target, GLint level, GLint xoffset,  GLsizei width, GLenum format, GLsizei imageSize, const GLvoid* data);
void glCompressedTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data);
void glCopyTexImage1D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
void glCopyTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void glCopyTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void glGetCompressedTexImage (GLenum target, GLint lod, GLvoid* img);
void glGetTexImage (GLenum target, GLint level, GLenum format, GLenum type, GLvoid* img);
void glGetTexLevelParameterfv (GLenum target, GLint level, GLenum pname, GLfloat* params);
void glGetTexLevelParameteriv (GLenum target, GLint level, GLenum pname, GLint* params);
void glGetTexParameterfv (GLenum target, GLenum pname, GLfloat* params);
void glGetTexParameteriv (GLenum target, GLenum pname, GLint* params);
void glGetTexParameterIiv (GLenum target, GLenum pname, GLint* params);
void glGetTexParameterIuiv (GLenum target, GLenum pname, GLuint* params);
GLboolean glIsTexture (GLuint texture);
void glTexBuffer (GLenum target, GLenum internalFormat, GLuint buffer);
void glTexImage1D (GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * data);
void glTexImage2DMultisample (GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void glTexImage3D (GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* data);
void glTexImage3DMultisample (GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void glTexParameteri (GLenum target, GLenum pname, GLint param);
void glTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* data);
void glTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* data);
void glClearBufferiv(GLenum buffer, GLint drawBuffer, const GLint* value);
void glClearBufferuiv(GLenum buffer, GLint drawBuffer, const GLuint* value);
void glClearBufferfv(GLenum buffer, GLint drawBuffer, const GLfloat* value);
void glClearBufferfi(GLenum buffer, GLint drawBuffer, GLfloat depth, GLint stencil);
void glClearDepth(GLclampd depth);
void glDrawBuffer(GLenum mode);
void glReadBuffer(GLenum mode);
void glBindFramebuffer(GLenum target, GLuint framebuffer);
void glBindRenderbuffer(GLenum target, GLuint renderbuffer);
void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GLenum glCheckFramebufferStatus(GLenum target);
void glDeleteFramebuffers(GLsizei n, GLuint* framebuffers);
void glDeleteRenderbuffers(GLsizei n, GLuint* renderbuffers);
void glDrawBuffers(GLsizei n, const GLenum* bufs);
void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level);
void glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer);
void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
void glGenFramebuffers(GLsizei n, GLuint* ids);
void glGenRenderbuffers(GLsizei n, GLuint* renderbuffers);
void glGenerateMipmap(GLenum target);
void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params);
void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params);
GLboolean glIsFramebuffer(GLuint framebuffer);
GLboolean glIsRenderbuffer(GLuint renderbuffer);
void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void glSampleMaski(GLuint maskNumber, GLbitfield mask);
void glAttachShader(GLuint program, GLuint shader);
void glBindAttribLocation(GLuint program, GLuint index, const GLchar* name);
void glBindFragDataLocation(GLuint program, GLuint colorNumber, const char* name);
void glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const char* name);
void glCompileShader(GLuint shader);
GLuint glCreateProgram(	void);
GLuint glCreateShader(GLenum shaderType);
void glDeleteProgram(GLuint program);
void glDeleteShader(GLuint shader);
void glDetachShader(GLuint program, GLuint shader);
void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei*	length, GLint* size, GLenum* type, GLchar* name);
void glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
void glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
void glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
void glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
GLint glGetAttribLocation(GLuint program, const GLchar* name);
GLint glGetFragDataIndex(GLuint program, const char* name);
GLint glGetFragDataLocation(GLuint program, const char * name);
void glGetProgramiv(GLuint program, GLenum pname, GLint *params);
void glGetProgramInfoLog(GLuint program, GLsizei maxLength, GLsizei *length, GLchar *infoLog);
void glGetShaderiv(GLuint shader, GLenum pname, GLint *params);
void glGetShaderInfoLog(GLuint shader, GLsizei maxLength, GLsizei *length, GLchar *infoLog);
void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar*	source);
void glGetUniformfv(GLuint program, GLint location, GLfloat* params);
void glGetUniformiv(GLuint program, GLint location, GLint* params);
void glGetUniformuiv(GLuint program, GLint location, GLuint* params);
GLuint glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName);
GLuint glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar **uniformNames, GLuint *uniformIndices);
GLint glGetUniformLocation(GLuint program, const GLchar* name);
GLboolean glIsProgram(GLuint program);
GLboolean glIsShader(GLuint shader);
void glLinkProgram(GLuint program);
void glShaderSource(GLuint shader, GLsizei count, const GLchar **string, const GLint *length);
void glUniform1f(GLint location, GLfloat v0);
void glUniform2f(GLint location, GLfloat v0, GLfloat v1);
void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void glUniform1i(GLint location, GLint v0);
void glUniform2i(GLint location, GLint v0, GLint v1);
void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2);
void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void glUniform1ui(GLint location, GLuint v0);
void glUniform2ui(GLint location, GLuint v0, GLuint v1);
void glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
void glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void glUniform1fv(GLint location, GLsizei count, const GLfloat* value);
void glUniform2fv(GLint location, GLsizei count, const GLfloat* value);
void glUniform3fv(GLint location, GLsizei count, const GLfloat* value);
void glUniform4fv(GLint location, GLsizei count, const GLfloat* value);
void glUniform1iv(GLint location, GLsizei count, const GLint* value);
void glUniform2iv(GLint location, GLsizei count, const GLint* value);
void glUniform3iv(GLint location, GLsizei count, const GLint* value);
void glUniform4iv(GLint location, GLsizei count, const GLint* value);
void glUniform1uiv(GLint location, GLsizei count, const GLuint* value);
void glUniform2uiv(GLint location, GLsizei count, const GLuint* value);
void glUniform3uiv(GLint location, GLsizei count, const GLuint* value);
void glUniform4uiv(GLint location, GLsizei count, const GLuint * 	value);
void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
void glUseProgram(GLuint program);
void glValidateProgram(GLuint program);
void glBindBuffer(GLenum target, GLuint buffer);
void glBindBufferBase(GLenum target, GLuint index, GLuint buffer);
void glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void glBufferData(GLenum target, GLsizeiptr size, const GLvoid* data, GLenum usage);
void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid* data);
void glCopyBufferSubData(GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size);
void glDeleteBuffers(GLsizei n, const GLuint* buffers);
void glEnableVertexAttribArray(GLuint index);
void glDisableVertexAttribArray(GLuint index);
void glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
void glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, GLvoid *indices, GLint basevertex);
void glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount);
void glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, GLvoid *indices, GLsizei primcount, GLint basevertex);
void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid* indices);
void glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLvoid *indices, GLint basevertex);
void glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length);
void glGenBuffers(GLsizei n, GLuint* buffers);
void glGetBufferParameteriv(GLenum target, GLenum value, GLint* data);
void glGetBufferParameteri64v(GLenum target, GLenum value, GLint64* data);
void glGetBufferPointerv(GLenum target, GLenum pname, GLvoid** params);
void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid* data);
void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble* params);
void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat* params);
void glGetVertexAttribiv(GLuint index, GLenum pname, GLint* params);
void glGetVertexAttribIiv(GLuint index, GLenum pname, GLint* params);
void glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint* params);
void glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid** pointer);
GLboolean glIsBuffer(GLuint buffer);
void* glMapBuffer(GLenum target, GLenum access);
void* glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
void glMultiDrawArrays(GLenum mode, const GLint* first, const GLsizei* count, GLsizei  	primcount);
void glMultiDrawElements(GLenum mode, const GLsizei* count, GLenum type, const GLvoid** indices, GLsizei primcount);
void glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount, GLint *basevertex);
void glPrimitiveRestartIndex(GLuint index);
void glProvokingVertex(GLenum provokeMode);
GLboolean glUnmapBuffer(GLenum target);
void glVertexAttrib1f(GLuint index, GLfloat v0);
void glVertexAttrib1s(GLuint index, GLshort v0);
void glVertexAttrib1d(GLuint index, GLdouble v0);
void glVertexAttribI1i(GLuint index, GLint v0);
void glVertexAttribI1ui(GLuint index, GLuint v0);
void glVertexAttrib2f(GLuint index, GLfloat v0, GLfloat v1);
void glVertexAttrib2s(GLuint index, GLshort v0, GLshort v1);
void glVertexAttrib2d(GLuint index, GLdouble v0, GLdouble v1);
void glVertexAttribI2i(GLuint index, GLint v0, GLint v1);
void glVertexAttribI2ui(GLuint index, GLuint v0, GLuint v1);
void glVertexAttrib3f(GLuint index, GLfloat v0, GLfloat v1, GLfloat v2);
void glVertexAttrib3s(GLuint index, GLshort v0, GLshort v1, GLshort v2);
void glVertexAttrib3d(GLuint index, GLdouble v0, GLdouble v1, GLdouble v2);
void glVertexAttribI3i(GLuint index, GLint v0, GLint v1, GLint v2);
void glVertexAttribI3ui(GLuint index, GLuint v0, GLuint v1, GLuint v2);
void glVertexAttrib4f(GLuint index, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void glVertexAttrib4s(GLuint index, GLshort v0, GLshort v1, GLshort v2, GLshort v3);
void glVertexAttrib4d(GLuint index, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
void glVertexAttrib4Nub(GLuint index, GLubyte v0, GLubyte v1, GLubyte v2, GLubyte v3);
void glVertexAttribI4i(GLuint index, GLint v0, GLint v1, GLint v2, GLint v3);
void glVertexAttribI4ui(GLuint index, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void glVertexAttrib1fv(GLuint index, const GLfloat* v);
void glVertexAttrib1sv(GLuint index, const GLshort* v);
void glVertexAttrib1dv(GLuint index, const GLdouble* v);
void glVertexAttribI1iv(GLuint index, const GLint* v);
void glVertexAttribI1uiv(GLuint index, const GLuint* v);
void glVertexAttrib2fv(GLuint index, const GLfloat* v);
void glVertexAttrib2sv(GLuint index, const GLshort* v);
void glVertexAttrib2dv(GLuint index, const GLdouble* v);
void glVertexAttribI2iv(GLuint index, const GLint* v);
void glVertexAttribI2uiv(GLuint index, const GLuint* v);
void glVertexAttrib3fv(GLuint index, const GLfloat* v);
void glVertexAttrib3sv(GLuint index, const GLshort* v);
void glVertexAttrib3dv(GLuint index, const GLdouble* v);
void glVertexAttribI3iv(GLuint index, const GLint* v);
void glVertexAttribI3uiv(GLuint index, const GLuint* v);
void glVertexAttrib4fv(GLuint index, const GLfloat* v);
void glVertexAttrib4sv(GLuint index, const GLshort* v);
void glVertexAttrib4dv(GLuint index, const GLdouble* v);
void glVertexAttrib4iv(GLuint index, const GLint* v);
void glVertexAttrib4bv(GLuint index, const GLbyte* v);
void glVertexAttrib4ubv(GLuint index, const GLubyte* v);
void glVertexAttrib4usv(GLuint index, const GLushort* v);
void glVertexAttrib4uiv(GLuint index, const GLuint* v);
void glVertexAttrib4Nbv(GLuint index, const GLbyte* v);
void glVertexAttrib4Nsv(GLuint index, const GLshort* v);
void glVertexAttrib4Niv(GLuint index, const GLint* v);
void glVertexAttrib4Nubv(GLuint index, const GLubyte* v);
void glVertexAttrib4Nusv(GLuint index, const GLushort* v);
void glVertexAttrib4Nuiv(GLuint index, const GLuint* v);
void glVertexAttribI4bv(GLuint index, const GLbyte* v);
void glVertexAttribI4ubv(GLuint index, const GLubyte* v);
void glVertexAttribI4sv(GLuint index, const GLshort* v);
void glVertexAttribI4usv(GLuint index, const GLushort* v);
void glVertexAttribI4iv(GLuint index, const GLint* v);
void glVertexAttribI4uiv(GLuint index, const GLuint* v);
void glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void glVertexAttribDivisor(GLuint index, GLuint divisor);
void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* pointer);
void glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid* pointer);
void glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void glBlendEquation(GLenum mode);
void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
void glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void glClampColor(GLenum target, GLenum clamp);
void glColorMaski(GLuint buf, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
void glDepthRange(GLclampd nearVal, GLclampd  	farVal);
void glGetBooleanv(GLenum pname, GLboolean* params);
void glGetDoublev(GLenum pname, GLdouble * params);
void glGetFloatv(GLenum pname, GLfloat* params);
void glGetInteger64v(GLenum pname, GLint64 * params);
void glGetBooleani_v(GLenum pname, GLuint index, GLboolean* data);
void glGetIntegeri_v(GLenum pname, GLuint index, GLint * data);
void glGetInteger64i_v(GLenum pname, GLuint index, GLint64* data);
GLboolean glIsEnabled(GLenum cap);
GLboolean glIsEnabledi(GLenum cap, GLuint index);
void glPixelStoref(GLenum pname, GLfloat param);
void glPointParameterf(GLenum pname, GLfloat param);
void glPointParameteri(GLenum pname, GLint param);
void glPolygonMode(GLenum face, GLenum mode);
void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
void glStencilMaskSeparate(GLenum face, GLuint mask);
void glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
void glBeginTransformFeedback(GLenum primitiveMode);
void glEndTransformFeedback(void);
void glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, char *name);
void glTransformFeedbackVaryings(GLuint program, GLsizei count, const char **varyings, GLenum bufferMode);
void glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val);
void glBeginConditionalRender(GLuint id, GLenum mode);
void glBeginQuery(GLenum target, GLuint id);
void glDeleteQueries(GLsizei n, const GLuint* ids);
void glEndConditionalRender(void);
void glEndQuery(GLenum target);
void glGenQueries(GLsizei n, GLuint* ids);
void glGetQueryObjectiv(GLuint id, GLenum pname, GLint* params);
void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint * params);
void glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64* params);
void glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 * params);
void glGetQueryiv(GLenum target, GLenum pname, GLint* params);
GLboolean glIsQuery(GLuint id);
void glQueryCounter(GLuint id, GLenum target);
GLenum glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
void glDeleteSync(GLsync sync);
GLsync glFenceSync(GLenum condition, GLbitfield flags);
void glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values);
GLboolean glIsSync(GLsync sync);
void glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
void glBindVertexArray(GLuint array);
void glDeleteVertexArrays(GLsizei n, const GLuint *arrays);
void glGenVertexArrays(GLsizei n, GLuint *arrays);
GLboolean glIsVertexArray(GLuint array);
void glBindSampler(GLuint unit, GLuint sampler);
void glDeleteSamplers(GLsizei n, const GLuint * samplers);
void glGenSamplers(GLsizei n, GLuint *samplers);
void glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat* params);
void glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint* params);
void glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint* params);
void glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint* params);
GLboolean glIsSampler(GLuint id);
void glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
void glSamplerParameteri(GLuint sampler, GLenum pname, GLint param);
void glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat* params);
void glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint* params);
void glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint* params);
void glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint* params);

#else
typedef void fp_glActiveTexture (GLenum texture);
typedef void fp_glAlphaFunc (GLenum func, GLclampf ref);
typedef void fp_glAlphaFuncx (GLenum func, GLclampx ref);
typedef void fp_glBindTexture (GLenum target, GLuint texture);
typedef void fp_glBlendFunc (GLenum sfactor, GLenum dfactor);
typedef void fp_glClear (GLbitfield mask);
typedef void fp_glClearColor (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
typedef void fp_glClearColorx (GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha);
typedef void fp_glClearDepthf (GLclampf depth);
typedef void fp_glClearDepthx (GLclampx depth);
typedef void fp_glClearStencil (GLint s);
typedef void fp_glClientActiveTexture (GLenum texture);
typedef void fp_glColor4f (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void fp_glColor4x (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void fp_glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void fp_glColorPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
typedef void fp_glCompressedTexImage2D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
typedef void fp_glCompressedTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
typedef void fp_glCopyTexImage2D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void fp_glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void fp_glCullFace (GLenum mode);
typedef void fp_glDeleteTextures (GLsizei n, const GLuint *textures);
typedef void fp_glDepthFunc (GLenum func);
typedef void fp_glDepthMask (GLboolean flag);
typedef void fp_glDepthRangef (GLclampf zNear, GLclampf zFar);
typedef void fp_glDepthRangex (GLclampx zNear, GLclampx zFar);
typedef void fp_glDisable (GLenum cap);
typedef void fp_glDisableClientState (GLenum array);
typedef void fp_glDrawArrays (GLenum mode, GLint first, GLsizei count);
typedef void fp_glDrawElements (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
typedef void fp_glEnable (GLenum cap);
typedef void fp_glEnableClientState (GLenum array);
typedef void fp_glFinish (void);
typedef void fp_glFlush (void);
typedef void fp_glFogf (GLenum pname, GLfloat param);
typedef void fp_glFogfv (GLenum pname, const GLfloat *params);
typedef void fp_glFogx (GLenum pname, GLfixed param);
typedef void fp_glFogxv (GLenum pname, const GLfixed *params);
typedef void fp_glFrontFace (GLenum mode);
typedef void fp_glFrustumf (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar);
typedef void fp_glFrustumx (GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar);
typedef void fp_glGenTextures (GLsizei n, GLuint *textures);
typedef GLenum fp_glGetError (void);
typedef void fp_glGetIntegerv (GLenum pname, GLint *params);
typedef const GLubyte* fp_glGetString (GLenum name);
typedef void fp_glHint (GLenum target, GLenum mode);
typedef void fp_glLightModelf (GLenum pname, GLfloat param);
typedef void fp_glLightModelfv (GLenum pname, const GLfloat *params);
typedef void fp_glLightModelx (GLenum pname, GLfixed param);
typedef void fp_glLightModelxv (GLenum pname, const GLfixed *params);
typedef void fp_glLightf (GLenum light, GLenum pname, GLfloat param);
typedef void fp_glLightfv (GLenum light, GLenum pname, const GLfloat *params);
typedef void fp_glLightx (GLenum light, GLenum pname, GLfixed param);
typedef void fp_glLightxv (GLenum light, GLenum pname, const GLfixed *params);
typedef void fp_glLineWidth (GLfloat width);
typedef void fp_glLineWidthx (GLfixed width);
typedef void fp_glLoadIdentity (void);
typedef void fp_glLoadMatrixf (const GLfloat *m);
typedef void fp_glLoadMatrixx (const GLfixed *m);
typedef void fp_glLogicOp (GLenum opcode);
typedef void fp_glMaterialf (GLenum face, GLenum pname, GLfloat param);
typedef void fp_glMaterialfv (GLenum face, GLenum pname, const GLfloat *params);
typedef void fp_glMaterialx (GLenum face, GLenum pname, GLfixed param);
typedef void fp_glMaterialxv (GLenum face, GLenum pname, const GLfixed *params);
typedef void fp_glMatrixMode (GLenum mode);
typedef void fp_glMultMatrixf (const GLfloat *m);
typedef void fp_glMultMatrixx (const GLfixed *m);
typedef void fp_glMultiTexCoord4f (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void fp_glMultiTexCoord4x (GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
typedef void fp_glNormal3f (GLfloat nx, GLfloat ny, GLfloat nz);
typedef void fp_glNormal3x (GLfixed nx, GLfixed ny, GLfixed nz);
typedef void fp_glNormalPointer (GLenum type, GLsizei stride, const GLvoid *pointer);
typedef void fp_glOrthof (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar);
typedef void fp_glOrthox (GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar);
typedef void fp_glPixelStorei (GLenum pname, GLint param);
typedef void fp_glPointSize (GLfloat size);
typedef void fp_glPointSizex (GLfixed size);
typedef void fp_glPolygonOffset (GLfloat factor, GLfloat units);
typedef void fp_glPolygonOffsetx (GLfixed factor, GLfixed units);
typedef void fp_glPopMatrix (void);
typedef void fp_glPushMatrix (void);
typedef void fp_glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
typedef void fp_glRotatef (GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void fp_glRotatex (GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
typedef void fp_glSampleCoverage (GLclampf value, GLboolean invert);
typedef void fp_glSampleCoveragex (GLclampx value, GLboolean invert);
typedef void fp_glScalef (GLfloat x, GLfloat y, GLfloat z);
typedef void fp_glScalex (GLfixed x, GLfixed y, GLfixed z);
typedef void fp_glScissor (GLint x, GLint y, GLsizei width, GLsizei height);
typedef void fp_glShadeModel (GLenum mode);
typedef void fp_glStencilFunc (GLenum func, GLint ref, GLuint mask);
typedef void fp_glStencilMask (GLuint mask);
typedef void fp_glStencilOp (GLenum fail, GLenum zfail, GLenum zpass);
typedef void fp_glTexCoordPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
typedef void fp_glTexEnvf (GLenum target, GLenum pname, GLfloat param);
typedef void fp_glTexEnvfv (GLenum target, GLenum pname, const GLfloat *params);
typedef void fp_glTexEnvx (GLenum target, GLenum pname, GLfixed param);
typedef void fp_glTexEnvxv (GLenum target, GLenum pname, const GLfixed *params);
typedef void fp_glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
typedef void fp_glTexParameterf (GLenum target, GLenum pname, GLfloat param);
typedef void fp_glTexParameterx (GLenum target, GLenum pname, GLfixed param);
typedef void fp_glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
typedef void fp_glTranslatef (GLfloat x, GLfloat y, GLfloat z);
typedef void fp_glTranslatex (GLfixed x, GLfixed y, GLfixed z);
typedef void fp_glVertexPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
typedef void fp_glViewport (GLint x, GLint y, GLsizei width, GLsizei height);

typedef void fp_glCompressedTexImage1D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei imageSize, const GLvoid* data);
typedef void fp_glCompressedTexImage3D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data);
typedef void fp_glCompressedTexSubImage1D (GLenum target, GLint level, GLint xoffset,  GLsizei width, GLenum format, GLsizei imageSize, const GLvoid* data);
typedef void fp_glCompressedTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data);
typedef void fp_glCopyTexImage1D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void fp_glCopyTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void fp_glCopyTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void fp_glGetCompressedTexImage (GLenum target, GLint lod, GLvoid* img);
typedef void fp_glGetTexImage (GLenum target, GLint level, GLenum format, GLenum type, GLvoid* img);
typedef void fp_glGetTexLevelParameterfv (GLenum target, GLint level, GLenum pname, GLfloat* params);
typedef void fp_glGetTexLevelParameteriv (GLenum target, GLint level, GLenum pname, GLint* params);
typedef void fp_glGetTexParameterfv (GLenum target, GLenum pname, GLfloat* params);
typedef void fp_glGetTexParameteriv (GLenum target, GLenum pname, GLint* params);
typedef void fp_glGetTexParameterIiv (GLenum target, GLenum pname, GLint* params);
typedef void fp_glGetTexParameterIuiv (GLenum target, GLenum pname, GLuint* params);
typedef GLboolean fp_glIsTexture (GLuint texture);
typedef void fp_glTexBuffer (GLenum target, GLenum internalFormat, GLuint buffer);
typedef void fp_glTexImage1D (GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * data);
typedef void fp_glTexImage2DMultisample (GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void fp_glTexImage3D (GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* data);
typedef void fp_glTexImage3DMultisample (GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void fp_glTexParameteri (GLenum target, GLenum pname, GLint param);
typedef void fp_glTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* data);
typedef void fp_glTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* data);
typedef void fp_glClearBufferiv(GLenum buffer, GLint drawBuffer, const GLint* value);
typedef void fp_glClearBufferuiv(GLenum buffer, GLint drawBuffer, const GLuint* value);
typedef void fp_glClearBufferfv(GLenum buffer, GLint drawBuffer, const GLfloat* value);
typedef void fp_glClearBufferfi(GLenum buffer, GLint drawBuffer, GLfloat depth, GLint stencil);
typedef void fp_glClearDepth(GLclampd depth);
typedef void fp_glDrawBuffer(GLenum mode);
typedef void fp_glReadBuffer(GLenum mode);
typedef void fp_glBindFramebuffer(GLenum target, GLuint framebuffer);
typedef void fp_glBindRenderbuffer(GLenum target, GLuint renderbuffer);
typedef void fp_glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef GLenum fp_glCheckFramebufferStatus(GLenum target);
typedef void fp_glDeleteFramebuffers(GLsizei n, GLuint* framebuffers);
typedef void fp_glDeleteRenderbuffers(GLsizei n, GLuint* renderbuffers);
typedef void fp_glDrawBuffers(GLsizei n, const GLenum* bufs);
typedef void fp_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void fp_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void fp_glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void fp_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void fp_glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer);
typedef void fp_glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void fp_glGenFramebuffers(GLsizei n, GLuint* ids);
typedef void fp_glGenRenderbuffers(GLsizei n, GLuint* renderbuffers);
typedef void fp_glGenerateMipmap(GLenum target);
typedef void fp_glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params);
typedef void fp_glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params);
typedef GLboolean fp_glIsFramebuffer(GLuint framebuffer);
typedef GLboolean fp_glIsRenderbuffer(GLuint renderbuffer);
typedef void fp_glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void fp_glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void fp_glSampleMaski(GLuint maskNumber, GLbitfield mask);
typedef void fp_glAttachShader(GLuint program, GLuint shader);
typedef void fp_glBindAttribLocation(GLuint program, GLuint index, const GLchar* name);
typedef void fp_glBindFragDataLocation(GLuint program, GLuint colorNumber, const char* name);
typedef void fp_glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const char* name);
typedef void fp_glCompileShader(GLuint shader);
typedef GLuint fp_glCreateProgram(	void);
typedef GLuint fp_glCreateShader(GLenum shaderType);
typedef void fp_glDeleteProgram(GLuint program);
typedef void fp_glDeleteShader(GLuint shader);
typedef void fp_glDetachShader(GLuint program, GLuint shader);
typedef void fp_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
typedef void fp_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei*	length, GLint* size, GLenum* type, GLchar* name);
typedef void fp_glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
typedef void fp_glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
typedef void fp_glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
typedef void fp_glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
typedef void fp_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
typedef GLint fp_glGetAttribLocation(GLuint program, const GLchar* name);
typedef GLint fp_glGetFragDataIndex(GLuint program, const char* name);
typedef GLint fp_glGetFragDataLocation(GLuint program, const char * name);
typedef void fp_glGetProgramiv(GLuint program, GLenum pname, GLint *params);
typedef void fp_glGetProgramInfoLog(GLuint program, GLsizei maxLength, GLsizei *length, GLchar *infoLog);
typedef void fp_glGetShaderiv(GLuint shader, GLenum pname, GLint *params);
typedef void fp_glGetShaderInfoLog(GLuint shader, GLsizei maxLength, GLsizei *length, GLchar *infoLog);
typedef void fp_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar*	source);
typedef void fp_glGetUniformfv(GLuint program, GLint location, GLfloat* params);
typedef void fp_glGetUniformiv(GLuint program, GLint location, GLint* params);
typedef void fp_glGetUniformuiv(GLuint program, GLint location, GLuint* params);
typedef GLuint fp_glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName);
typedef GLuint fp_glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar **uniformNames, GLuint *uniformIndices);
typedef GLint fp_glGetUniformLocation(GLuint program, const GLchar* name);
typedef GLboolean fp_glIsProgram(GLuint program);
typedef GLboolean fp_glIsShader(GLuint shader);
typedef void fp_glLinkProgram(GLuint program);
typedef void fp_glShaderSource(GLuint shader, GLsizei count, const GLchar **string, const GLint *length);
typedef void fp_glUniform1f(GLint location, GLfloat v0);
typedef void fp_glUniform2f(GLint location, GLfloat v0, GLfloat v1);
typedef void fp_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void fp_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void fp_glUniform1i(GLint location, GLint v0);
typedef void fp_glUniform2i(GLint location, GLint v0, GLint v1);
typedef void fp_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2);
typedef void fp_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void fp_glUniform1ui(GLint location, GLuint v0);
typedef void fp_glUniform2ui(GLint location, GLuint v0, GLuint v1);
typedef void fp_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void fp_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void fp_glUniform1fv(GLint location, GLsizei count, const GLfloat* value);
typedef void fp_glUniform2fv(GLint location, GLsizei count, const GLfloat* value);
typedef void fp_glUniform3fv(GLint location, GLsizei count, const GLfloat* value);
typedef void fp_glUniform4fv(GLint location, GLsizei count, const GLfloat* value);
typedef void fp_glUniform1iv(GLint location, GLsizei count, const GLint* value);
typedef void fp_glUniform2iv(GLint location, GLsizei count, const GLint* value);
typedef void fp_glUniform3iv(GLint location, GLsizei count, const GLint* value);
typedef void fp_glUniform4iv(GLint location, GLsizei count, const GLint* value);
typedef void fp_glUniform1uiv(GLint location, GLsizei count, const GLuint* value);
typedef void fp_glUniform2uiv(GLint location, GLsizei count, const GLuint* value);
typedef void fp_glUniform3uiv(GLint location, GLsizei count, const GLuint* value);
typedef void fp_glUniform4uiv(GLint location, GLsizei count, const GLuint * 	value);
typedef void fp_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void fp_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void fp_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void fp_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void fp_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void fp_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void fp_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void fp_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void fp_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
typedef void fp_glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
typedef void fp_glUseProgram(GLuint program);
typedef void fp_glValidateProgram(GLuint program);
typedef void fp_glBindBuffer(GLenum target, GLuint buffer);
typedef void fp_glBindBufferBase(GLenum target, GLuint index, GLuint buffer);
typedef void fp_glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void fp_glBufferData(GLenum target, GLsizeiptr size, const GLvoid* data, GLenum usage);
typedef void fp_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid* data);
typedef void fp_glCopyBufferSubData(GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size);
typedef void fp_glDeleteBuffers(GLsizei n, const GLuint* buffers);
typedef void fp_glEnableVertexAttribArray(GLuint index);
typedef void fp_glDisableVertexAttribArray(GLuint index);
typedef void fp_glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
typedef void fp_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, GLvoid *indices, GLint basevertex);
typedef void fp_glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount);
typedef void fp_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, GLvoid *indices, GLsizei primcount, GLint basevertex);
typedef void fp_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid* indices);
typedef void fp_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLvoid *indices, GLint basevertex);
typedef void fp_glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length);
typedef void fp_glGenBuffers(GLsizei n, GLuint* buffers);
typedef void fp_glGetBufferParameteriv(GLenum target, GLenum value, GLint* data);
typedef void fp_glGetBufferParameteri64v(GLenum target, GLenum value, GLint64* data);
typedef void fp_glGetBufferPointerv(GLenum target, GLenum pname, GLvoid** params);
typedef void fp_glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid* data);
typedef void fp_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble* params);
typedef void fp_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat* params);
typedef void fp_glGetVertexAttribiv(GLuint index, GLenum pname, GLint* params);
typedef void fp_glGetVertexAttribIiv(GLuint index, GLenum pname, GLint* params);
typedef void fp_glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint* params);
typedef void fp_glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid** pointer);
typedef GLboolean fp_glIsBuffer(GLuint buffer);
typedef void* fp_glMapBuffer(GLenum target, GLenum access);
typedef void* fp_glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void fp_glMultiDrawArrays(GLenum mode, const GLint* first, const GLsizei* count, GLsizei  	primcount);
typedef void fp_glMultiDrawElements(GLenum mode, const GLsizei* count, GLenum type, const GLvoid** indices, GLsizei primcount);
typedef void fp_glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount, GLint *basevertex);
typedef void fp_glPrimitiveRestartIndex(GLuint index);
typedef void fp_glProvokingVertex(GLenum provokeMode);
typedef GLboolean fp_glUnmapBuffer(GLenum target);
typedef void fp_glVertexAttrib1f(GLuint index, GLfloat v0);
typedef void fp_glVertexAttrib1s(GLuint index, GLshort v0);
typedef void fp_glVertexAttrib1d(GLuint index, GLdouble v0);
typedef void fp_glVertexAttribI1i(GLuint index, GLint v0);
typedef void fp_glVertexAttribI1ui(GLuint index, GLuint v0);
typedef void fp_glVertexAttrib2f(GLuint index, GLfloat v0, GLfloat v1);
typedef void fp_glVertexAttrib2s(GLuint index, GLshort v0, GLshort v1);
typedef void fp_glVertexAttrib2d(GLuint index, GLdouble v0, GLdouble v1);
typedef void fp_glVertexAttribI2i(GLuint index, GLint v0, GLint v1);
typedef void fp_glVertexAttribI2ui(GLuint index, GLuint v0, GLuint v1);
typedef void fp_glVertexAttrib3f(GLuint index, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void fp_glVertexAttrib3s(GLuint index, GLshort v0, GLshort v1, GLshort v2);
typedef void fp_glVertexAttrib3d(GLuint index, GLdouble v0, GLdouble v1, GLdouble v2);
typedef void fp_glVertexAttribI3i(GLuint index, GLint v0, GLint v1, GLint v2);
typedef void fp_glVertexAttribI3ui(GLuint index, GLuint v0, GLuint v1, GLuint v2);
typedef void fp_glVertexAttrib4f(GLuint index, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void fp_glVertexAttrib4s(GLuint index, GLshort v0, GLshort v1, GLshort v2, GLshort v3);
typedef void fp_glVertexAttrib4d(GLuint index, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
typedef void fp_glVertexAttrib4Nub(GLuint index, GLubyte v0, GLubyte v1, GLubyte v2, GLubyte v3);
typedef void fp_glVertexAttribI4i(GLuint index, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void fp_glVertexAttribI4ui(GLuint index, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void fp_glVertexAttrib1fv(GLuint index, const GLfloat* v);
typedef void fp_glVertexAttrib1sv(GLuint index, const GLshort* v);
typedef void fp_glVertexAttrib1dv(GLuint index, const GLdouble* v);
typedef void fp_glVertexAttribI1iv(GLuint index, const GLint* v);
typedef void fp_glVertexAttribI1uiv(GLuint index, const GLuint* v);
typedef void fp_glVertexAttrib2fv(GLuint index, const GLfloat* v);
typedef void fp_glVertexAttrib2sv(GLuint index, const GLshort* v);
typedef void fp_glVertexAttrib2dv(GLuint index, const GLdouble* v);
typedef void fp_glVertexAttribI2iv(GLuint index, const GLint* v);
typedef void fp_glVertexAttribI2uiv(GLuint index, const GLuint* v);
typedef void fp_glVertexAttrib3fv(GLuint index, const GLfloat* v);
typedef void fp_glVertexAttrib3sv(GLuint index, const GLshort* v);
typedef void fp_glVertexAttrib3dv(GLuint index, const GLdouble* v);
typedef void fp_glVertexAttribI3iv(GLuint index, const GLint* v);
typedef void fp_glVertexAttribI3uiv(GLuint index, const GLuint* v);
typedef void fp_glVertexAttrib4fv(GLuint index, const GLfloat* v);
typedef void fp_glVertexAttrib4sv(GLuint index, const GLshort* v);
typedef void fp_glVertexAttrib4dv(GLuint index, const GLdouble* v);
typedef void fp_glVertexAttrib4iv(GLuint index, const GLint* v);
typedef void fp_glVertexAttrib4bv(GLuint index, const GLbyte* v);
typedef void fp_glVertexAttrib4ubv(GLuint index, const GLubyte* v);
typedef void fp_glVertexAttrib4usv(GLuint index, const GLushort* v);
typedef void fp_glVertexAttrib4uiv(GLuint index, const GLuint* v);
typedef void fp_glVertexAttrib4Nbv(GLuint index, const GLbyte* v);
typedef void fp_glVertexAttrib4Nsv(GLuint index, const GLshort* v);
typedef void fp_glVertexAttrib4Niv(GLuint index, const GLint* v);
typedef void fp_glVertexAttrib4Nubv(GLuint index, const GLubyte* v);
typedef void fp_glVertexAttrib4Nusv(GLuint index, const GLushort* v);
typedef void fp_glVertexAttrib4Nuiv(GLuint index, const GLuint* v);
typedef void fp_glVertexAttribI4bv(GLuint index, const GLbyte* v);
typedef void fp_glVertexAttribI4ubv(GLuint index, const GLubyte* v);
typedef void fp_glVertexAttribI4sv(GLuint index, const GLshort* v);
typedef void fp_glVertexAttribI4usv(GLuint index, const GLushort* v);
typedef void fp_glVertexAttribI4iv(GLuint index, const GLint* v);
typedef void fp_glVertexAttribI4uiv(GLuint index, const GLuint* v);
typedef void fp_glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void fp_glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void fp_glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void fp_glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void fp_glVertexAttribDivisor(GLuint index, GLuint divisor);
typedef void fp_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* pointer);
typedef void fp_glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid* pointer);
typedef void fp_glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
typedef void fp_glBlendEquation(GLenum mode);
typedef void fp_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
typedef void fp_glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void fp_glClampColor(GLenum target, GLenum clamp);
typedef void fp_glColorMaski(GLuint buf, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void fp_glDepthRange(GLclampd nearVal, GLclampd  	farVal);
typedef void fp_glGetBooleanv(GLenum pname, GLboolean* params);
typedef void fp_glGetDoublev(GLenum pname, GLdouble * params);
typedef void fp_glGetFloatv(GLenum pname, GLfloat* params);
typedef void fp_glGetInteger64v(GLenum pname, GLint64 * params);
typedef void fp_glGetBooleani_v(GLenum pname, GLuint index, GLboolean* data);
typedef void fp_glGetIntegeri_v(GLenum pname, GLuint index, GLint * data);
typedef void fp_glGetInteger64i_v(GLenum pname, GLuint index, GLint64* data);
typedef GLboolean fp_glIsEnabled(GLenum cap);
typedef GLboolean fp_glIsEnabledi(GLenum cap, GLuint index);
typedef void fp_glPixelStoref(GLenum pname, GLfloat param);
typedef void fp_glPointParameterf(GLenum pname, GLfloat param);
typedef void fp_glPointParameteri(GLenum pname, GLint param);
typedef void fp_glPolygonMode(GLenum face, GLenum mode);
typedef void fp_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
typedef void fp_glStencilMaskSeparate(GLenum face, GLuint mask);
typedef void fp_glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void fp_glBeginTransformFeedback(GLenum primitiveMode);
typedef void fp_glEndTransformFeedback(void);
typedef void fp_glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, char *name);
typedef void fp_glTransformFeedbackVaryings(GLuint program, GLsizei count, const char **varyings, GLenum bufferMode);
typedef void fp_glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val);
typedef void fp_glBeginConditionalRender(GLuint id, GLenum mode);
typedef void fp_glBeginQuery(GLenum target, GLuint id);
typedef void fp_glDeleteQueries(GLsizei n, const GLuint* ids);
typedef void fp_glEndConditionalRender(void);
typedef void fp_glEndQuery(GLenum target);
typedef void fp_glGenQueries(GLsizei n, GLuint* ids);
typedef void fp_glGetQueryObjectiv(GLuint id, GLenum pname, GLint* params);
typedef void fp_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint * params);
typedef void fp_glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64* params);
typedef void fp_glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 * params);
typedef void fp_glGetQueryiv(GLenum target, GLenum pname, GLint* params);
typedef GLboolean fp_glIsQuery(GLuint id);
typedef void fp_glQueryCounter(GLuint id, GLenum target);
typedef GLenum fp_glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void fp_glDeleteSync(GLsync sync);
typedef GLsync fp_glFenceSync(GLenum condition, GLbitfield flags);
typedef void fp_glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values);
typedef GLboolean fp_glIsSync(GLsync sync);
typedef void fp_glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void fp_glBindVertexArray(GLuint array);
typedef void fp_glDeleteVertexArrays(GLsizei n, const GLuint *arrays);
typedef void fp_glGenVertexArrays(GLsizei n, GLuint *arrays);
typedef GLboolean fp_glIsVertexArray(GLuint array);
typedef void fp_glBindSampler(GLuint unit, GLuint sampler);
typedef void fp_glDeleteSamplers(GLsizei n, const GLuint * samplers);
typedef void fp_glGenSamplers(GLsizei n, GLuint *samplers);
typedef void fp_glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat* params);
typedef void fp_glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint* params);
typedef void fp_glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint* params);
typedef void fp_glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint* params);
typedef GLboolean fp_glIsSampler(GLuint id);
typedef void fp_glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
typedef void fp_glSamplerParameteri(GLuint sampler, GLenum pname, GLint param);
typedef void fp_glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat* params);
typedef void fp_glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint* params);
typedef void fp_glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint* params);
typedef void fp_glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint* params);

#define FUNCTION_SIGNATURE(x) static fp_##x* x

FUNCTION_SIGNATURE(glActiveTexture); 
FUNCTION_SIGNATURE(glAlphaFunc); 
FUNCTION_SIGNATURE(glAlphaFuncx); 
FUNCTION_SIGNATURE(glBindTexture); 
FUNCTION_SIGNATURE(glBlendFunc); 
FUNCTION_SIGNATURE(glClear); 
FUNCTION_SIGNATURE(glClearColor); 
FUNCTION_SIGNATURE(glClearColorx); 
FUNCTION_SIGNATURE(glClearDepthf); 
FUNCTION_SIGNATURE(glClearDepthx); 
FUNCTION_SIGNATURE(glClearStencil); 
FUNCTION_SIGNATURE(glClientActiveTexture); 
FUNCTION_SIGNATURE(glColor4f); 
FUNCTION_SIGNATURE(glColor4x); 
FUNCTION_SIGNATURE(glColorMask); 
FUNCTION_SIGNATURE(glColorPointer); 
FUNCTION_SIGNATURE(glCompressedTexImage2D); 
FUNCTION_SIGNATURE(glCompressedTexSubImage2D); 
FUNCTION_SIGNATURE(glCopyTexImage2D); 
FUNCTION_SIGNATURE(glCopyTexSubImage2D); 
FUNCTION_SIGNATURE(glCullFace); 
FUNCTION_SIGNATURE(glDeleteTextures); 
FUNCTION_SIGNATURE(glDepthFunc); 
FUNCTION_SIGNATURE(glDepthMask); 
FUNCTION_SIGNATURE(glDepthRangef); 
FUNCTION_SIGNATURE(glDepthRangex); 
FUNCTION_SIGNATURE(glDisable); 
FUNCTION_SIGNATURE(glDisableClientState); 
FUNCTION_SIGNATURE(glDrawArrays); 
FUNCTION_SIGNATURE(glDrawElements); 
FUNCTION_SIGNATURE(glEnable); 
FUNCTION_SIGNATURE(glEnableClientState); 
FUNCTION_SIGNATURE(glFinish); 
FUNCTION_SIGNATURE(glFlush); 
FUNCTION_SIGNATURE(glFogf); 
FUNCTION_SIGNATURE(glFogfv); 
FUNCTION_SIGNATURE(glFogx); 
FUNCTION_SIGNATURE(glFogxv); 
FUNCTION_SIGNATURE(glFrontFace); 
FUNCTION_SIGNATURE(glFrustumf); 
FUNCTION_SIGNATURE(glFrustumx); 
FUNCTION_SIGNATURE(glGenTextures); 
FUNCTION_SIGNATURE(glGetError); 
FUNCTION_SIGNATURE(glGetIntegerv); 
FUNCTION_SIGNATURE(glGetString); 
FUNCTION_SIGNATURE(glHint); 
FUNCTION_SIGNATURE(glLightModelf); 
FUNCTION_SIGNATURE(glLightModelfv); 
FUNCTION_SIGNATURE(glLightModelx); 
FUNCTION_SIGNATURE(glLightModelxv); 
FUNCTION_SIGNATURE(glLightf); 
FUNCTION_SIGNATURE(glLightfv); 
FUNCTION_SIGNATURE(glLightx); 
FUNCTION_SIGNATURE(glLightxv); 
FUNCTION_SIGNATURE(glLineWidth); 
FUNCTION_SIGNATURE(glLineWidthx); 
FUNCTION_SIGNATURE(glLoadIdentity); 
FUNCTION_SIGNATURE(glLoadMatrixf); 
FUNCTION_SIGNATURE(glLoadMatrixx); 
FUNCTION_SIGNATURE(glLogicOp); 
FUNCTION_SIGNATURE(glMaterialf); 
FUNCTION_SIGNATURE(glMaterialfv); 
FUNCTION_SIGNATURE(glMaterialx); 
FUNCTION_SIGNATURE(glMaterialxv); 
FUNCTION_SIGNATURE(glMatrixMode); 
FUNCTION_SIGNATURE(glMultMatrixf); 
FUNCTION_SIGNATURE(glMultMatrixx); 
FUNCTION_SIGNATURE(glMultiTexCoord4f); 
FUNCTION_SIGNATURE(glMultiTexCoord4x); 
FUNCTION_SIGNATURE(glNormal3f); 
FUNCTION_SIGNATURE(glNormal3x); 
FUNCTION_SIGNATURE(glNormalPointer); 
FUNCTION_SIGNATURE(glOrthof); 
FUNCTION_SIGNATURE(glOrthox); 
FUNCTION_SIGNATURE(glPixelStorei); 
FUNCTION_SIGNATURE(glPointSize); 
FUNCTION_SIGNATURE(glPointSizex); 
FUNCTION_SIGNATURE(glPolygonOffset); 
FUNCTION_SIGNATURE(glPolygonOffsetx); 
FUNCTION_SIGNATURE(glPopMatrix); 
FUNCTION_SIGNATURE(glPushMatrix); 
FUNCTION_SIGNATURE(glReadPixels); 
FUNCTION_SIGNATURE(glRotatef); 
FUNCTION_SIGNATURE(glRotatex); 
FUNCTION_SIGNATURE(glSampleCoverage); 
FUNCTION_SIGNATURE(glSampleCoveragex); 
FUNCTION_SIGNATURE(glScalef); 
FUNCTION_SIGNATURE(glScalex); 
FUNCTION_SIGNATURE(glScissor); 
FUNCTION_SIGNATURE(glShadeModel); 
FUNCTION_SIGNATURE(glStencilFunc); 
FUNCTION_SIGNATURE(glStencilMask); 
FUNCTION_SIGNATURE(glStencilOp); 
FUNCTION_SIGNATURE(glTexCoordPointer); 
FUNCTION_SIGNATURE(glTexEnvf); 
FUNCTION_SIGNATURE(glTexEnvfv); 
FUNCTION_SIGNATURE(glTexEnvx); 
FUNCTION_SIGNATURE(glTexEnvxv); 
FUNCTION_SIGNATURE(glTexImage2D); 
FUNCTION_SIGNATURE(glTexParameterf); 
FUNCTION_SIGNATURE(glTexParameterx); 
FUNCTION_SIGNATURE(glTexSubImage2D); 
FUNCTION_SIGNATURE(glTranslatef); 
FUNCTION_SIGNATURE(glTranslatex); 
FUNCTION_SIGNATURE(glVertexPointer); 
FUNCTION_SIGNATURE(glViewport); 


FUNCTION_SIGNATURE(glCompressedTexImage1D); 
FUNCTION_SIGNATURE(glCompressedTexImage3D); 
FUNCTION_SIGNATURE(glCompressedTexSubImage1D); 
FUNCTION_SIGNATURE(glCompressedTexSubImage3D); 
FUNCTION_SIGNATURE(glCopyTexImage1D); 
FUNCTION_SIGNATURE(glCopyTexSubImage1D); 
FUNCTION_SIGNATURE(glCopyTexSubImage3D); 
FUNCTION_SIGNATURE(glGetCompressedTexImage); 
FUNCTION_SIGNATURE(glGetTexImage); 
FUNCTION_SIGNATURE(glGetTexLevelParameterfv); 
FUNCTION_SIGNATURE(glGetTexLevelParameteriv); 
FUNCTION_SIGNATURE(glGetTexParameterfv); 
FUNCTION_SIGNATURE(glGetTexParameteriv); 
FUNCTION_SIGNATURE(glGetTexParameterIiv); 
FUNCTION_SIGNATURE(glGetTexParameterIuiv); 
FUNCTION_SIGNATURE(glIsTexture); 
FUNCTION_SIGNATURE(glTexBuffer); 
FUNCTION_SIGNATURE(glTexImage1D); 
FUNCTION_SIGNATURE(glTexImage2DMultisample); 
FUNCTION_SIGNATURE(glTexImage3D); 
FUNCTION_SIGNATURE(glTexImage3DMultisample); 
FUNCTION_SIGNATURE(glTexParameteri); 
FUNCTION_SIGNATURE(glTexSubImage1D); 
FUNCTION_SIGNATURE(glTexSubImage3D); 
FUNCTION_SIGNATURE(glClearBufferiv);
FUNCTION_SIGNATURE(glClearBufferuiv);
FUNCTION_SIGNATURE(glClearBufferfv);
FUNCTION_SIGNATURE(glClearBufferfi);
FUNCTION_SIGNATURE(glClearDepth);
FUNCTION_SIGNATURE(glDrawBuffer);
FUNCTION_SIGNATURE(glReadBuffer);
FUNCTION_SIGNATURE(glBindFramebuffer);
FUNCTION_SIGNATURE(glBindRenderbuffer);
FUNCTION_SIGNATURE(glBlitFramebuffer);
FUNCTION_SIGNATURE(glCheckFramebufferStatus);
FUNCTION_SIGNATURE(glDeleteFramebuffers);
FUNCTION_SIGNATURE(glDeleteRenderbuffers);
FUNCTION_SIGNATURE(glDrawBuffers);
FUNCTION_SIGNATURE(glFramebufferRenderbuffer);
FUNCTION_SIGNATURE(glFramebufferTexture);
FUNCTION_SIGNATURE(glFramebufferTexture1D);
FUNCTION_SIGNATURE(glFramebufferTexture2D);
FUNCTION_SIGNATURE(glFramebufferTexture3D);
FUNCTION_SIGNATURE(glFramebufferTextureLayer);
FUNCTION_SIGNATURE(glGenFramebuffers);
FUNCTION_SIGNATURE(glGenRenderbuffers);
FUNCTION_SIGNATURE(glGenerateMipmap);
FUNCTION_SIGNATURE(glGetFramebufferAttachmentParameteriv);
FUNCTION_SIGNATURE(glGetRenderbufferParameteriv);
FUNCTION_SIGNATURE(glIsFramebuffer);
FUNCTION_SIGNATURE(glIsRenderbuffer);
FUNCTION_SIGNATURE(glRenderbufferStorage);
FUNCTION_SIGNATURE(glRenderbufferStorageMultisample);
FUNCTION_SIGNATURE(glSampleMaski);
FUNCTION_SIGNATURE(glAttachShader);
FUNCTION_SIGNATURE(glBindAttribLocation);
FUNCTION_SIGNATURE(glBindFragDataLocation);
FUNCTION_SIGNATURE(glBindFragDataLocationIndexed);
FUNCTION_SIGNATURE(glCompileShader);
FUNCTION_SIGNATURE(glCreateProgram);
FUNCTION_SIGNATURE(glCreateShader);
FUNCTION_SIGNATURE(glDeleteProgram);
FUNCTION_SIGNATURE(glDeleteShader);
FUNCTION_SIGNATURE(glDetachShader);
FUNCTION_SIGNATURE(glGetActiveAttrib);
FUNCTION_SIGNATURE(glGetActiveUniform);
FUNCTION_SIGNATURE(glGetActiveUniformBlockiv);
FUNCTION_SIGNATURE(glGetActiveUniformBlockName);
FUNCTION_SIGNATURE(glGetActiveUniformName);
FUNCTION_SIGNATURE(glGetActiveUniformsiv);
FUNCTION_SIGNATURE(glGetAttachedShaders);
FUNCTION_SIGNATURE(glGetAttribLocation);
FUNCTION_SIGNATURE(glGetFragDataIndex);
FUNCTION_SIGNATURE(glGetFragDataLocation);
FUNCTION_SIGNATURE(glGetProgramiv);
FUNCTION_SIGNATURE(glGetProgramInfoLog);
FUNCTION_SIGNATURE(glGetShaderiv);
FUNCTION_SIGNATURE(glGetShaderInfoLog);
FUNCTION_SIGNATURE(glGetShaderSource);
FUNCTION_SIGNATURE(glGetUniformfv);
FUNCTION_SIGNATURE(glGetUniformiv);
FUNCTION_SIGNATURE(glGetUniformuiv);
FUNCTION_SIGNATURE(glGetUniformBlockIndex);
FUNCTION_SIGNATURE(glGetUniformIndices);
FUNCTION_SIGNATURE(glGetUniformLocation);
FUNCTION_SIGNATURE(glIsProgram);
FUNCTION_SIGNATURE(glIsShader);
FUNCTION_SIGNATURE(glLinkProgram);
FUNCTION_SIGNATURE(glShaderSource);
FUNCTION_SIGNATURE(glUniform1f);
FUNCTION_SIGNATURE(glUniform2f);
FUNCTION_SIGNATURE(glUniform3f);
FUNCTION_SIGNATURE(glUniform4f);
FUNCTION_SIGNATURE(glUniform1i);
FUNCTION_SIGNATURE(glUniform2i);
FUNCTION_SIGNATURE(glUniform3i);
FUNCTION_SIGNATURE(glUniform4i);
FUNCTION_SIGNATURE(glUniform1ui);
FUNCTION_SIGNATURE(glUniform2ui);
FUNCTION_SIGNATURE(glUniform3ui);
FUNCTION_SIGNATURE(glUniform4ui);
FUNCTION_SIGNATURE(glUniform1fv);
FUNCTION_SIGNATURE(glUniform2fv);
FUNCTION_SIGNATURE(glUniform3fv);
FUNCTION_SIGNATURE(glUniform4fv);
FUNCTION_SIGNATURE(glUniform1iv);
FUNCTION_SIGNATURE(glUniform2iv);
FUNCTION_SIGNATURE(glUniform3iv);
FUNCTION_SIGNATURE(glUniform4iv);
FUNCTION_SIGNATURE(glUniform1uiv);
FUNCTION_SIGNATURE(glUniform2uiv);
FUNCTION_SIGNATURE(glUniform3uiv);
FUNCTION_SIGNATURE(glUniform4uiv);
FUNCTION_SIGNATURE(glUniformMatrix2fv);
FUNCTION_SIGNATURE(glUniformMatrix3fv);
FUNCTION_SIGNATURE(glUniformMatrix4fv);
FUNCTION_SIGNATURE(glUniformMatrix2x3fv);
FUNCTION_SIGNATURE(glUniformMatrix3x2fv);
FUNCTION_SIGNATURE(glUniformMatrix2x4fv);
FUNCTION_SIGNATURE(glUniformMatrix4x2fv);
FUNCTION_SIGNATURE(glUniformMatrix3x4fv);
FUNCTION_SIGNATURE(glUniformMatrix4x3fv);
FUNCTION_SIGNATURE(glUniformBlockBinding);
FUNCTION_SIGNATURE(glUseProgram);
FUNCTION_SIGNATURE(glValidateProgram);
FUNCTION_SIGNATURE(glBindBuffer);
FUNCTION_SIGNATURE(glBindBufferBase);
FUNCTION_SIGNATURE(glBindBufferRange);
FUNCTION_SIGNATURE(glBufferData);
FUNCTION_SIGNATURE(glBufferSubData);
FUNCTION_SIGNATURE(glCopyBufferSubData);
FUNCTION_SIGNATURE(glDeleteBuffers);
FUNCTION_SIGNATURE(glEnableVertexAttribArray);
FUNCTION_SIGNATURE(glDisableVertexAttribArray);
FUNCTION_SIGNATURE(glDrawArraysInstanced);
FUNCTION_SIGNATURE(glDrawElementsBaseVertex);
FUNCTION_SIGNATURE(glDrawElementsInstanced);
FUNCTION_SIGNATURE(glDrawElementsInstancedBaseVertex);
FUNCTION_SIGNATURE(glDrawRangeElements);
FUNCTION_SIGNATURE(glDrawRangeElementsBaseVertex);
FUNCTION_SIGNATURE(glFlushMappedBufferRange);
FUNCTION_SIGNATURE(glGenBuffers);
FUNCTION_SIGNATURE(glGetBufferParameteriv);
FUNCTION_SIGNATURE(glGetBufferParameteri64v);
FUNCTION_SIGNATURE(glGetBufferPointerv);
FUNCTION_SIGNATURE(glGetBufferSubData);
FUNCTION_SIGNATURE(glGetVertexAttribdv);
FUNCTION_SIGNATURE(glGetVertexAttribfv);
FUNCTION_SIGNATURE(glGetVertexAttribiv);
FUNCTION_SIGNATURE(glGetVertexAttribIiv);
FUNCTION_SIGNATURE(glGetVertexAttribIuiv);
FUNCTION_SIGNATURE(glGetVertexAttribPointerv);
FUNCTION_SIGNATURE(glIsBuffer);
FUNCTION_SIGNATURE(glMapBuffer);
FUNCTION_SIGNATURE(glMapBufferRange);
FUNCTION_SIGNATURE(glMultiDrawArrays);
FUNCTION_SIGNATURE(glMultiDrawElements);
FUNCTION_SIGNATURE(glMultiDrawElementsBaseVertex);
FUNCTION_SIGNATURE(glPrimitiveRestartIndex);
FUNCTION_SIGNATURE(glProvokingVertex);
FUNCTION_SIGNATURE(glUnmapBuffer);
FUNCTION_SIGNATURE(glVertexAttrib1f);
FUNCTION_SIGNATURE(glVertexAttrib1s);
FUNCTION_SIGNATURE(glVertexAttrib1d);
FUNCTION_SIGNATURE(glVertexAttribI1i);
FUNCTION_SIGNATURE(glVertexAttribI1ui);
FUNCTION_SIGNATURE(glVertexAttrib2f);
FUNCTION_SIGNATURE(glVertexAttrib2s);
FUNCTION_SIGNATURE(glVertexAttrib2d);
FUNCTION_SIGNATURE(glVertexAttribI2i);
FUNCTION_SIGNATURE(glVertexAttribI2ui);
FUNCTION_SIGNATURE(glVertexAttrib3f);
FUNCTION_SIGNATURE(glVertexAttrib3s);
FUNCTION_SIGNATURE(glVertexAttrib3d);
FUNCTION_SIGNATURE(glVertexAttribI3i);
FUNCTION_SIGNATURE(glVertexAttribI3ui);
FUNCTION_SIGNATURE(glVertexAttrib4f);
FUNCTION_SIGNATURE(glVertexAttrib4s);
FUNCTION_SIGNATURE(glVertexAttrib4d);
FUNCTION_SIGNATURE(glVertexAttrib4Nub);
FUNCTION_SIGNATURE(glVertexAttribI4i);
FUNCTION_SIGNATURE(glVertexAttribI4ui);
FUNCTION_SIGNATURE(glVertexAttrib1fv);
FUNCTION_SIGNATURE(glVertexAttrib1sv);
FUNCTION_SIGNATURE(glVertexAttrib1dv);
FUNCTION_SIGNATURE(glVertexAttribI1iv);
FUNCTION_SIGNATURE(glVertexAttribI1uiv);
FUNCTION_SIGNATURE(glVertexAttrib2fv);
FUNCTION_SIGNATURE(glVertexAttrib2sv);
FUNCTION_SIGNATURE(glVertexAttrib2dv);
FUNCTION_SIGNATURE(glVertexAttribI2iv);
FUNCTION_SIGNATURE(glVertexAttribI2uiv);
FUNCTION_SIGNATURE(glVertexAttrib3fv);
FUNCTION_SIGNATURE(glVertexAttrib3sv);
FUNCTION_SIGNATURE(glVertexAttrib3dv);
FUNCTION_SIGNATURE(glVertexAttribI3iv);
FUNCTION_SIGNATURE(glVertexAttribI3uiv);
FUNCTION_SIGNATURE(glVertexAttrib4fv);
FUNCTION_SIGNATURE(glVertexAttrib4sv);
FUNCTION_SIGNATURE(glVertexAttrib4dv);
FUNCTION_SIGNATURE(glVertexAttrib4iv);
FUNCTION_SIGNATURE(glVertexAttrib4bv);
FUNCTION_SIGNATURE(glVertexAttrib4ubv);
FUNCTION_SIGNATURE(glVertexAttrib4usv);
FUNCTION_SIGNATURE(glVertexAttrib4uiv);
FUNCTION_SIGNATURE(glVertexAttrib4Nbv);
FUNCTION_SIGNATURE(glVertexAttrib4Nsv);
FUNCTION_SIGNATURE(glVertexAttrib4Niv);
FUNCTION_SIGNATURE(glVertexAttrib4Nubv);
FUNCTION_SIGNATURE(glVertexAttrib4Nusv);
FUNCTION_SIGNATURE(glVertexAttrib4Nuiv);
FUNCTION_SIGNATURE(glVertexAttribI4bv);
FUNCTION_SIGNATURE(glVertexAttribI4ubv);
FUNCTION_SIGNATURE(glVertexAttribI4sv);
FUNCTION_SIGNATURE(glVertexAttribI4usv);
FUNCTION_SIGNATURE(glVertexAttribI4iv);
FUNCTION_SIGNATURE(glVertexAttribI4uiv);
FUNCTION_SIGNATURE(glVertexAttribP1ui);
FUNCTION_SIGNATURE(glVertexAttribP2ui);
FUNCTION_SIGNATURE(glVertexAttribP3ui);
FUNCTION_SIGNATURE(glVertexAttribP4ui);
FUNCTION_SIGNATURE(glVertexAttribDivisor);
FUNCTION_SIGNATURE(glVertexAttribPointer);
FUNCTION_SIGNATURE(glVertexAttribIPointer);
FUNCTION_SIGNATURE(glBlendColor);
FUNCTION_SIGNATURE(glBlendEquation);
FUNCTION_SIGNATURE(glBlendEquationSeparate);
FUNCTION_SIGNATURE(glBlendFuncSeparate);
FUNCTION_SIGNATURE(glClampColor);
FUNCTION_SIGNATURE(glColorMaski);
FUNCTION_SIGNATURE(glDepthRange);
FUNCTION_SIGNATURE(glGetBooleanv);
FUNCTION_SIGNATURE(glGetDoublev);
FUNCTION_SIGNATURE(glGetFloatv);
FUNCTION_SIGNATURE(glGetInteger64v);
FUNCTION_SIGNATURE(glGetBooleani_v);
FUNCTION_SIGNATURE(glGetIntegeri_v);
FUNCTION_SIGNATURE(glGetInteger64i_v);
FUNCTION_SIGNATURE(glIsEnabled);
FUNCTION_SIGNATURE(glIsEnabledi);
FUNCTION_SIGNATURE(glPixelStoref);
FUNCTION_SIGNATURE(glPointParameterf);
FUNCTION_SIGNATURE(glPointParameteri);
FUNCTION_SIGNATURE(glPolygonMode);
FUNCTION_SIGNATURE(glStencilFuncSeparate);
FUNCTION_SIGNATURE(glStencilMaskSeparate);
FUNCTION_SIGNATURE(glStencilOpSeparate);
FUNCTION_SIGNATURE(glBeginTransformFeedback);
FUNCTION_SIGNATURE(glEndTransformFeedback);
FUNCTION_SIGNATURE(glGetTransformFeedbackVarying);
FUNCTION_SIGNATURE(glTransformFeedbackVaryings);
FUNCTION_SIGNATURE(glGetMultisamplefv);
FUNCTION_SIGNATURE(glBeginConditionalRender);
FUNCTION_SIGNATURE(glBeginQuery);
FUNCTION_SIGNATURE(glDeleteQueries);
FUNCTION_SIGNATURE(glEndConditionalRender);
FUNCTION_SIGNATURE(glEndQuery);
FUNCTION_SIGNATURE(glGenQueries);
FUNCTION_SIGNATURE(glGetQueryObjectiv);
FUNCTION_SIGNATURE(glGetQueryObjectuiv);
FUNCTION_SIGNATURE(glGetQueryObjecti64v);
FUNCTION_SIGNATURE(glGetQueryObjectui64v);
FUNCTION_SIGNATURE(glGetQueryiv);
FUNCTION_SIGNATURE(glIsQuery);
FUNCTION_SIGNATURE(glQueryCounter);
FUNCTION_SIGNATURE(glClientWaitSync);
FUNCTION_SIGNATURE(glDeleteSync);
FUNCTION_SIGNATURE(glFenceSync);
FUNCTION_SIGNATURE(glGetSynciv);
FUNCTION_SIGNATURE(glIsSync);
FUNCTION_SIGNATURE(glWaitSync);
FUNCTION_SIGNATURE(glBindVertexArray);
FUNCTION_SIGNATURE(glDeleteVertexArrays);
FUNCTION_SIGNATURE(glGenVertexArrays);
FUNCTION_SIGNATURE(glIsVertexArray);
FUNCTION_SIGNATURE(glBindSampler);
FUNCTION_SIGNATURE(glDeleteSamplers);
FUNCTION_SIGNATURE(glGenSamplers);
FUNCTION_SIGNATURE(glGetSamplerParameterfv);
FUNCTION_SIGNATURE(glGetSamplerParameteriv);
FUNCTION_SIGNATURE(glGetSamplerParameterIiv);
FUNCTION_SIGNATURE(glGetSamplerParameterIuiv);
FUNCTION_SIGNATURE(glIsSampler);
FUNCTION_SIGNATURE(glSamplerParameterf);
FUNCTION_SIGNATURE(glSamplerParameteri);
FUNCTION_SIGNATURE(glSamplerParameterfv);
FUNCTION_SIGNATURE(glSamplerParameteriv);
FUNCTION_SIGNATURE(glSamplerParameterIiv);
FUNCTION_SIGNATURE(glSamplerParameterIuiv);

typedef void* FOpenGLFunctionLoader(const char* FunctionString);


#define LOAD_GL_FUNCTION(x) \
    do { \
    x = (fp_##x*)FunctionLoader(#x); \
    if(!(x)) \
        ASSERT(!""); \
    } \
    while(0)

//TODO(EVERYONE): Move this to renderer and remove the inline
inline void LoadOpenGL_1_0(FOpenGLFunctionLoader* FunctionLoader)
{           
    LOAD_GL_FUNCTION(glActiveTexture); 
    LOAD_GL_FUNCTION(glAlphaFunc); 
    LOAD_GL_FUNCTION(glAlphaFuncx); 
    LOAD_GL_FUNCTION(glBindTexture); 
    LOAD_GL_FUNCTION(glBlendFunc); 
    LOAD_GL_FUNCTION(glClear); 
    LOAD_GL_FUNCTION(glClearColor); 
    LOAD_GL_FUNCTION(glClearColorx); 
    LOAD_GL_FUNCTION(glClearDepthf); 
    LOAD_GL_FUNCTION(glClearDepthx); 
    LOAD_GL_FUNCTION(glClearStencil); 
    LOAD_GL_FUNCTION(glClientActiveTexture); 
    LOAD_GL_FUNCTION(glColor4f); 
    LOAD_GL_FUNCTION(glColor4x); 
    LOAD_GL_FUNCTION(glColorMask); 
    LOAD_GL_FUNCTION(glColorPointer); 
    LOAD_GL_FUNCTION(glCompressedTexImage2D); 
    LOAD_GL_FUNCTION(glCompressedTexSubImage2D); 
    LOAD_GL_FUNCTION(glCopyTexImage2D); 
    LOAD_GL_FUNCTION(glCopyTexSubImage2D); 
    LOAD_GL_FUNCTION(glCullFace); 
    LOAD_GL_FUNCTION(glDeleteTextures); 
    LOAD_GL_FUNCTION(glDepthFunc); 
    LOAD_GL_FUNCTION(glDepthMask); 
    LOAD_GL_FUNCTION(glDepthRangef); 
    LOAD_GL_FUNCTION(glDepthRangex); 
    LOAD_GL_FUNCTION(glDisable); 
    LOAD_GL_FUNCTION(glDisableClientState); 
    LOAD_GL_FUNCTION(glDrawArrays); 
    LOAD_GL_FUNCTION(glDrawElements); 
    LOAD_GL_FUNCTION(glEnable); 
    LOAD_GL_FUNCTION(glEnableClientState); 
    LOAD_GL_FUNCTION(glFinish); 
    LOAD_GL_FUNCTION(glFlush); 
    LOAD_GL_FUNCTION(glFogf); 
    LOAD_GL_FUNCTION(glFogfv); 
    LOAD_GL_FUNCTION(glFogx); 
    LOAD_GL_FUNCTION(glFogxv); 
    LOAD_GL_FUNCTION(glFrontFace); 
    LOAD_GL_FUNCTION(glFrustumf); 
    LOAD_GL_FUNCTION(glFrustumx); 
    LOAD_GL_FUNCTION(glGenTextures); 
    LOAD_GL_FUNCTION(glGetError); 
    LOAD_GL_FUNCTION(glGetIntegerv); 
    LOAD_GL_FUNCTION(glGetString); 
    LOAD_GL_FUNCTION(glHint); 
    LOAD_GL_FUNCTION(glLightModelf); 
    LOAD_GL_FUNCTION(glLightModelfv); 
    LOAD_GL_FUNCTION(glLightModelx); 
    LOAD_GL_FUNCTION(glLightModelxv); 
    LOAD_GL_FUNCTION(glLightf); 
    LOAD_GL_FUNCTION(glLightfv); 
    LOAD_GL_FUNCTION(glLightx); 
    LOAD_GL_FUNCTION(glLightxv); 
    LOAD_GL_FUNCTION(glLineWidth); 
    LOAD_GL_FUNCTION(glLineWidthx); 
    LOAD_GL_FUNCTION(glLoadIdentity); 
    LOAD_GL_FUNCTION(glLoadMatrixf); 
    LOAD_GL_FUNCTION(glLoadMatrixx); 
    LOAD_GL_FUNCTION(glLogicOp); 
    LOAD_GL_FUNCTION(glMaterialf); 
    LOAD_GL_FUNCTION(glMaterialfv); 
    LOAD_GL_FUNCTION(glMaterialx); 
    LOAD_GL_FUNCTION(glMaterialxv); 
    LOAD_GL_FUNCTION(glMatrixMode); 
    LOAD_GL_FUNCTION(glMultMatrixf); 
    LOAD_GL_FUNCTION(glMultMatrixx); 
    LOAD_GL_FUNCTION(glMultiTexCoord4f); 
    LOAD_GL_FUNCTION(glMultiTexCoord4x); 
    LOAD_GL_FUNCTION(glNormal3f); 
    LOAD_GL_FUNCTION(glNormal3x); 
    LOAD_GL_FUNCTION(glNormalPointer); 
    LOAD_GL_FUNCTION(glOrthof); 
    LOAD_GL_FUNCTION(glOrthox); 
    LOAD_GL_FUNCTION(glPixelStorei); 
    LOAD_GL_FUNCTION(glPointSize); 
    LOAD_GL_FUNCTION(glPointSizex); 
    LOAD_GL_FUNCTION(glPolygonOffset); 
    LOAD_GL_FUNCTION(glPolygonOffsetx); 
    LOAD_GL_FUNCTION(glPopMatrix); 
    LOAD_GL_FUNCTION(glPushMatrix); 
    LOAD_GL_FUNCTION(glReadPixels); 
    LOAD_GL_FUNCTION(glRotatef); 
    LOAD_GL_FUNCTION(glRotatex); 
    LOAD_GL_FUNCTION(glSampleCoverage); 
    LOAD_GL_FUNCTION(glSampleCoveragex); 
    LOAD_GL_FUNCTION(glScalef); 
    LOAD_GL_FUNCTION(glScalex); 
    LOAD_GL_FUNCTION(glScissor); 
    LOAD_GL_FUNCTION(glShadeModel); 
    LOAD_GL_FUNCTION(glStencilFunc); 
    LOAD_GL_FUNCTION(glStencilMask); 
    LOAD_GL_FUNCTION(glStencilOp); 
    LOAD_GL_FUNCTION(glTexCoordPointer); 
    LOAD_GL_FUNCTION(glTexEnvf); 
    LOAD_GL_FUNCTION(glTexEnvfv); 
    LOAD_GL_FUNCTION(glTexEnvx); 
    LOAD_GL_FUNCTION(glTexEnvxv); 
    LOAD_GL_FUNCTION(glTexImage2D); 
    LOAD_GL_FUNCTION(glTexParameterf); 
    LOAD_GL_FUNCTION(glTexParameterx); 
    LOAD_GL_FUNCTION(glTexSubImage2D); 
    LOAD_GL_FUNCTION(glTranslatef); 
    LOAD_GL_FUNCTION(glTranslatex); 
    LOAD_GL_FUNCTION(glVertexPointer); 
    LOAD_GL_FUNCTION(glViewport); 
}

inline void LoadOpenGL_3_3(FOpenGLFunctionLoader* FunctionLoader)
{    
    LOAD_GL_FUNCTION(glCompressedTexImage1D); 
    LOAD_GL_FUNCTION(glCompressedTexImage3D); 
    LOAD_GL_FUNCTION(glCompressedTexSubImage1D); 
    LOAD_GL_FUNCTION(glCompressedTexSubImage3D); 
    LOAD_GL_FUNCTION(glCopyTexImage1D); 
    LOAD_GL_FUNCTION(glCopyTexSubImage1D); 
    LOAD_GL_FUNCTION(glCopyTexSubImage3D); 
    LOAD_GL_FUNCTION(glGetCompressedTexImage); 
    LOAD_GL_FUNCTION(glGetTexImage); 
    LOAD_GL_FUNCTION(glGetTexLevelParameterfv); 
    LOAD_GL_FUNCTION(glGetTexLevelParameteriv); 
    LOAD_GL_FUNCTION(glGetTexParameterfv); 
    LOAD_GL_FUNCTION(glGetTexParameteriv); 
    LOAD_GL_FUNCTION(glGetTexParameterIiv); 
    LOAD_GL_FUNCTION(glGetTexParameterIuiv); 
    LOAD_GL_FUNCTION(glIsTexture); 
    LOAD_GL_FUNCTION(glTexBuffer); 
    LOAD_GL_FUNCTION(glTexImage1D); 
    LOAD_GL_FUNCTION(glTexImage2DMultisample); 
    LOAD_GL_FUNCTION(glTexImage3D); 
    LOAD_GL_FUNCTION(glTexImage3DMultisample); 
    LOAD_GL_FUNCTION(glTexParameteri); 
    LOAD_GL_FUNCTION(glTexSubImage1D); 
    LOAD_GL_FUNCTION(glTexSubImage3D); 
    LOAD_GL_FUNCTION(glClearBufferiv);
    LOAD_GL_FUNCTION(glClearBufferuiv);
    LOAD_GL_FUNCTION(glClearBufferfv);
    LOAD_GL_FUNCTION(glClearBufferfi);
    LOAD_GL_FUNCTION(glClearDepth);
    LOAD_GL_FUNCTION(glDrawBuffer);
    LOAD_GL_FUNCTION(glReadBuffer);
    LOAD_GL_FUNCTION(glBindFramebuffer);
    LOAD_GL_FUNCTION(glBindRenderbuffer);
    LOAD_GL_FUNCTION(glBlitFramebuffer);
    LOAD_GL_FUNCTION(glCheckFramebufferStatus);
    LOAD_GL_FUNCTION(glDeleteFramebuffers);
    LOAD_GL_FUNCTION(glDeleteRenderbuffers);
    LOAD_GL_FUNCTION(glDrawBuffers);
    LOAD_GL_FUNCTION(glFramebufferRenderbuffer);
    LOAD_GL_FUNCTION(glFramebufferTexture);
    LOAD_GL_FUNCTION(glFramebufferTexture1D);
    LOAD_GL_FUNCTION(glFramebufferTexture2D);
    LOAD_GL_FUNCTION(glFramebufferTexture3D);
    LOAD_GL_FUNCTION(glFramebufferTextureLayer);
    LOAD_GL_FUNCTION(glGenFramebuffers);
    LOAD_GL_FUNCTION(glGenRenderbuffers);
    LOAD_GL_FUNCTION(glGenerateMipmap);
    LOAD_GL_FUNCTION(glGetFramebufferAttachmentParameteriv);
    LOAD_GL_FUNCTION(glGetRenderbufferParameteriv);
    LOAD_GL_FUNCTION(glIsFramebuffer);
    LOAD_GL_FUNCTION(glIsRenderbuffer);
    LOAD_GL_FUNCTION(glRenderbufferStorage);
    LOAD_GL_FUNCTION(glRenderbufferStorageMultisample);
    LOAD_GL_FUNCTION(glSampleMaski);
    LOAD_GL_FUNCTION(glAttachShader);
    LOAD_GL_FUNCTION(glBindAttribLocation);
    LOAD_GL_FUNCTION(glBindFragDataLocation);
    LOAD_GL_FUNCTION(glBindFragDataLocationIndexed);
    LOAD_GL_FUNCTION(glCompileShader);
    LOAD_GL_FUNCTION(glCreateProgram);
    LOAD_GL_FUNCTION(glCreateShader);
    LOAD_GL_FUNCTION(glDeleteProgram);
    LOAD_GL_FUNCTION(glDeleteShader);
    LOAD_GL_FUNCTION(glDetachShader);
    LOAD_GL_FUNCTION(glGetActiveAttrib);
    LOAD_GL_FUNCTION(glGetActiveUniform);
    LOAD_GL_FUNCTION(glGetActiveUniformBlockiv);
    LOAD_GL_FUNCTION(glGetActiveUniformBlockName);
    LOAD_GL_FUNCTION(glGetActiveUniformName);
    LOAD_GL_FUNCTION(glGetActiveUniformsiv);
    LOAD_GL_FUNCTION(glGetAttachedShaders);
    LOAD_GL_FUNCTION(glGetAttribLocation);
    LOAD_GL_FUNCTION(glGetFragDataIndex);
    LOAD_GL_FUNCTION(glGetFragDataLocation);
    LOAD_GL_FUNCTION(glGetProgramiv);
    LOAD_GL_FUNCTION(glGetProgramInfoLog);
    LOAD_GL_FUNCTION(glGetShaderiv);
    LOAD_GL_FUNCTION(glGetShaderInfoLog);
    LOAD_GL_FUNCTION(glGetShaderSource);
    LOAD_GL_FUNCTION(glGetUniformfv);
    LOAD_GL_FUNCTION(glGetUniformiv);
    LOAD_GL_FUNCTION(glGetUniformuiv);
    LOAD_GL_FUNCTION(glGetUniformBlockIndex);
    LOAD_GL_FUNCTION(glGetUniformIndices);
    LOAD_GL_FUNCTION(glGetUniformLocation);
    LOAD_GL_FUNCTION(glIsProgram);
    LOAD_GL_FUNCTION(glIsShader);
    LOAD_GL_FUNCTION(glLinkProgram);
    LOAD_GL_FUNCTION(glShaderSource);
    LOAD_GL_FUNCTION(glUniform1f);
    LOAD_GL_FUNCTION(glUniform2f);
    LOAD_GL_FUNCTION(glUniform3f);
    LOAD_GL_FUNCTION(glUniform4f);
    LOAD_GL_FUNCTION(glUniform1i);
    LOAD_GL_FUNCTION(glUniform2i);
    LOAD_GL_FUNCTION(glUniform3i);
    LOAD_GL_FUNCTION(glUniform4i);
    LOAD_GL_FUNCTION(glUniform1ui);
    LOAD_GL_FUNCTION(glUniform2ui);
    LOAD_GL_FUNCTION(glUniform3ui);
    LOAD_GL_FUNCTION(glUniform4ui);
    LOAD_GL_FUNCTION(glUniform1fv);
    LOAD_GL_FUNCTION(glUniform2fv);
    LOAD_GL_FUNCTION(glUniform3fv);
    LOAD_GL_FUNCTION(glUniform4fv);
    LOAD_GL_FUNCTION(glUniform1iv);
    LOAD_GL_FUNCTION(glUniform2iv);
    LOAD_GL_FUNCTION(glUniform3iv);
    LOAD_GL_FUNCTION(glUniform4iv);
    LOAD_GL_FUNCTION(glUniform1uiv);
    LOAD_GL_FUNCTION(glUniform2uiv);
    LOAD_GL_FUNCTION(glUniform3uiv);
    LOAD_GL_FUNCTION(glUniform4uiv);
    LOAD_GL_FUNCTION(glUniformMatrix2fv);
    LOAD_GL_FUNCTION(glUniformMatrix3fv);
    LOAD_GL_FUNCTION(glUniformMatrix4fv);
    LOAD_GL_FUNCTION(glUniformMatrix2x3fv);
    LOAD_GL_FUNCTION(glUniformMatrix3x2fv);
    LOAD_GL_FUNCTION(glUniformMatrix2x4fv);
    LOAD_GL_FUNCTION(glUniformMatrix4x2fv);
    LOAD_GL_FUNCTION(glUniformMatrix3x4fv);
    LOAD_GL_FUNCTION(glUniformMatrix4x3fv);
    LOAD_GL_FUNCTION(glUniformBlockBinding);
    LOAD_GL_FUNCTION(glUseProgram);
    LOAD_GL_FUNCTION(glValidateProgram);
    LOAD_GL_FUNCTION(glBindBuffer);
    LOAD_GL_FUNCTION(glBindBufferBase);
    LOAD_GL_FUNCTION(glBindBufferRange);
    LOAD_GL_FUNCTION(glBufferData);
    LOAD_GL_FUNCTION(glBufferSubData);
    LOAD_GL_FUNCTION(glCopyBufferSubData);
    LOAD_GL_FUNCTION(glDeleteBuffers);
    LOAD_GL_FUNCTION(glEnableVertexAttribArray);
    LOAD_GL_FUNCTION(glDisableVertexAttribArray);
    LOAD_GL_FUNCTION(glDrawArraysInstanced);
    LOAD_GL_FUNCTION(glDrawElementsBaseVertex);
    LOAD_GL_FUNCTION(glDrawElementsInstanced);
    LOAD_GL_FUNCTION(glDrawElementsInstancedBaseVertex);
    LOAD_GL_FUNCTION(glDrawRangeElements);
    LOAD_GL_FUNCTION(glDrawRangeElementsBaseVertex);
    LOAD_GL_FUNCTION(glFlushMappedBufferRange);
    LOAD_GL_FUNCTION(glGenBuffers);
    LOAD_GL_FUNCTION(glGetBufferParameteriv);
    LOAD_GL_FUNCTION(glGetBufferParameteri64v);
    LOAD_GL_FUNCTION(glGetBufferPointerv);
    LOAD_GL_FUNCTION(glGetBufferSubData);
    LOAD_GL_FUNCTION(glGetVertexAttribdv);
    LOAD_GL_FUNCTION(glGetVertexAttribfv);
    LOAD_GL_FUNCTION(glGetVertexAttribiv);
    LOAD_GL_FUNCTION(glGetVertexAttribIiv);
    LOAD_GL_FUNCTION(glGetVertexAttribIuiv);
    LOAD_GL_FUNCTION(glGetVertexAttribPointerv);
    LOAD_GL_FUNCTION(glIsBuffer);
    LOAD_GL_FUNCTION(glMapBuffer);
    LOAD_GL_FUNCTION(glMapBufferRange);
    LOAD_GL_FUNCTION(glMultiDrawArrays);
    LOAD_GL_FUNCTION(glMultiDrawElements);
    LOAD_GL_FUNCTION(glMultiDrawElementsBaseVertex);
    LOAD_GL_FUNCTION(glPrimitiveRestartIndex);
    LOAD_GL_FUNCTION(glProvokingVertex);
    LOAD_GL_FUNCTION(glUnmapBuffer);
    LOAD_GL_FUNCTION(glVertexAttrib1f);
    LOAD_GL_FUNCTION(glVertexAttrib1s);
    LOAD_GL_FUNCTION(glVertexAttrib1d);
    LOAD_GL_FUNCTION(glVertexAttribI1i);
    LOAD_GL_FUNCTION(glVertexAttribI1ui);
    LOAD_GL_FUNCTION(glVertexAttrib2f);
    LOAD_GL_FUNCTION(glVertexAttrib2s);
    LOAD_GL_FUNCTION(glVertexAttrib2d);
    LOAD_GL_FUNCTION(glVertexAttribI2i);
    LOAD_GL_FUNCTION(glVertexAttribI2ui);
    LOAD_GL_FUNCTION(glVertexAttrib3f);
    LOAD_GL_FUNCTION(glVertexAttrib3s);
    LOAD_GL_FUNCTION(glVertexAttrib3d);
    LOAD_GL_FUNCTION(glVertexAttribI3i);
    LOAD_GL_FUNCTION(glVertexAttribI3ui);
    LOAD_GL_FUNCTION(glVertexAttrib4f);
    LOAD_GL_FUNCTION(glVertexAttrib4s);
    LOAD_GL_FUNCTION(glVertexAttrib4d);
    LOAD_GL_FUNCTION(glVertexAttrib4Nub);
    LOAD_GL_FUNCTION(glVertexAttribI4i);
    LOAD_GL_FUNCTION(glVertexAttribI4ui);
    LOAD_GL_FUNCTION(glVertexAttrib1fv);
    LOAD_GL_FUNCTION(glVertexAttrib1sv);
    LOAD_GL_FUNCTION(glVertexAttrib1dv);
    LOAD_GL_FUNCTION(glVertexAttribI1iv);
    LOAD_GL_FUNCTION(glVertexAttribI1uiv);
    LOAD_GL_FUNCTION(glVertexAttrib2fv);
    LOAD_GL_FUNCTION(glVertexAttrib2sv);
    LOAD_GL_FUNCTION(glVertexAttrib2dv);
    LOAD_GL_FUNCTION(glVertexAttribI2iv);
    LOAD_GL_FUNCTION(glVertexAttribI2uiv);
    LOAD_GL_FUNCTION(glVertexAttrib3fv);
    LOAD_GL_FUNCTION(glVertexAttrib3sv);
    LOAD_GL_FUNCTION(glVertexAttrib3dv);
    LOAD_GL_FUNCTION(glVertexAttribI3iv);
    LOAD_GL_FUNCTION(glVertexAttribI3uiv);
    LOAD_GL_FUNCTION(glVertexAttrib4fv);
    LOAD_GL_FUNCTION(glVertexAttrib4sv);
    LOAD_GL_FUNCTION(glVertexAttrib4dv);
    LOAD_GL_FUNCTION(glVertexAttrib4iv);
    LOAD_GL_FUNCTION(glVertexAttrib4bv);
    LOAD_GL_FUNCTION(glVertexAttrib4ubv);
    LOAD_GL_FUNCTION(glVertexAttrib4usv);
    LOAD_GL_FUNCTION(glVertexAttrib4uiv);
    LOAD_GL_FUNCTION(glVertexAttrib4Nbv);
    LOAD_GL_FUNCTION(glVertexAttrib4Nsv);
    LOAD_GL_FUNCTION(glVertexAttrib4Niv);
    LOAD_GL_FUNCTION(glVertexAttrib4Nubv);
    LOAD_GL_FUNCTION(glVertexAttrib4Nusv);
    LOAD_GL_FUNCTION(glVertexAttrib4Nuiv);
    LOAD_GL_FUNCTION(glVertexAttribI4bv);
    LOAD_GL_FUNCTION(glVertexAttribI4ubv);
    LOAD_GL_FUNCTION(glVertexAttribI4sv);
    LOAD_GL_FUNCTION(glVertexAttribI4usv);
    LOAD_GL_FUNCTION(glVertexAttribI4iv);
    LOAD_GL_FUNCTION(glVertexAttribI4uiv);
    LOAD_GL_FUNCTION(glVertexAttribP1ui);
    LOAD_GL_FUNCTION(glVertexAttribP2ui);
    LOAD_GL_FUNCTION(glVertexAttribP3ui);
    LOAD_GL_FUNCTION(glVertexAttribP4ui);
    LOAD_GL_FUNCTION(glVertexAttribDivisor);
    LOAD_GL_FUNCTION(glVertexAttribPointer);
    LOAD_GL_FUNCTION(glVertexAttribIPointer);
    LOAD_GL_FUNCTION(glBlendColor);
    LOAD_GL_FUNCTION(glBlendEquation);
    LOAD_GL_FUNCTION(glBlendEquationSeparate);
    LOAD_GL_FUNCTION(glBlendFuncSeparate);
    LOAD_GL_FUNCTION(glClampColor);
    LOAD_GL_FUNCTION(glColorMaski);
    LOAD_GL_FUNCTION(glDepthRange);
    LOAD_GL_FUNCTION(glGetBooleanv);
    LOAD_GL_FUNCTION(glGetDoublev);
    LOAD_GL_FUNCTION(glGetFloatv);
    LOAD_GL_FUNCTION(glGetInteger64v);
    LOAD_GL_FUNCTION(glGetBooleani_v);
    LOAD_GL_FUNCTION(glGetIntegeri_v);
    LOAD_GL_FUNCTION(glGetInteger64i_v);
    LOAD_GL_FUNCTION(glIsEnabled);
    LOAD_GL_FUNCTION(glIsEnabledi);
    LOAD_GL_FUNCTION(glPixelStoref);
    LOAD_GL_FUNCTION(glPointParameterf);
    LOAD_GL_FUNCTION(glPointParameteri);
    LOAD_GL_FUNCTION(glPolygonMode);
    LOAD_GL_FUNCTION(glStencilFuncSeparate);
    LOAD_GL_FUNCTION(glStencilMaskSeparate);
    LOAD_GL_FUNCTION(glStencilOpSeparate);
    LOAD_GL_FUNCTION(glBeginTransformFeedback);
    LOAD_GL_FUNCTION(glEndTransformFeedback);
    LOAD_GL_FUNCTION(glGetTransformFeedbackVarying);
    LOAD_GL_FUNCTION(glTransformFeedbackVaryings);
    LOAD_GL_FUNCTION(glGetMultisamplefv);
    LOAD_GL_FUNCTION(glBeginConditionalRender);
    LOAD_GL_FUNCTION(glBeginQuery);
    LOAD_GL_FUNCTION(glDeleteQueries);
    LOAD_GL_FUNCTION(glEndConditionalRender);
    LOAD_GL_FUNCTION(glEndQuery);
    LOAD_GL_FUNCTION(glGenQueries);
    LOAD_GL_FUNCTION(glGetQueryObjectiv);
    LOAD_GL_FUNCTION(glGetQueryObjectuiv);
    LOAD_GL_FUNCTION(glGetQueryObjecti64v);
    LOAD_GL_FUNCTION(glGetQueryObjectui64v);
    LOAD_GL_FUNCTION(glGetQueryiv);
    LOAD_GL_FUNCTION(glIsQuery);
    LOAD_GL_FUNCTION(glQueryCounter);
    LOAD_GL_FUNCTION(glClientWaitSync);
    LOAD_GL_FUNCTION(glDeleteSync);
    LOAD_GL_FUNCTION(glFenceSync);
    LOAD_GL_FUNCTION(glGetSynciv);
    LOAD_GL_FUNCTION(glIsSync);
    LOAD_GL_FUNCTION(glWaitSync);
    LOAD_GL_FUNCTION(glBindVertexArray);
    LOAD_GL_FUNCTION(glDeleteVertexArrays);
    LOAD_GL_FUNCTION(glGenVertexArrays);
    LOAD_GL_FUNCTION(glIsVertexArray);
    LOAD_GL_FUNCTION(glBindSampler);
    LOAD_GL_FUNCTION(glDeleteSamplers);
    LOAD_GL_FUNCTION(glGenSamplers);
    LOAD_GL_FUNCTION(glGetSamplerParameterfv);
    LOAD_GL_FUNCTION(glGetSamplerParameteriv);
    LOAD_GL_FUNCTION(glGetSamplerParameterIiv);
    LOAD_GL_FUNCTION(glGetSamplerParameterIuiv);
    LOAD_GL_FUNCTION(glIsSampler);
    LOAD_GL_FUNCTION(glSamplerParameterf);
    LOAD_GL_FUNCTION(glSamplerParameteri);
    LOAD_GL_FUNCTION(glSamplerParameterfv);
    LOAD_GL_FUNCTION(glSamplerParameteriv);
    LOAD_GL_FUNCTION(glSamplerParameterIiv);
    LOAD_GL_FUNCTION(glSamplerParameterIuiv);
}
#endif
//NOTE(EVERYONE): This is gives us information about the hardware used in the renderer. Should we used and
//defined in the renderer so I will just leave this here for now
struct FDeviceInfo
{
    const unsigned char* Vendor;
    const unsigned char* Renderer;
    const unsigned char* Version;    
};

#define OPENGL_H
#endif
